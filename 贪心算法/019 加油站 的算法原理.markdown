### 贪心策略

#### 1. 问题背景  

给定一个环形道路上的 `n` 个加油站，每个加油站 `i` 提供 `gas[i]` 升汽油，从 `i` 到 `i+1` 需消耗 `cost[i]` 升汽油。求是否存在一个起点，使得从该点出发能绕环一周。若有，返回唯一解；否则返回 `-1`。

在问题中，我们需要找到一个起点，使得从该点出发能够绕环一周。暴力法的时间复杂度为 `O(n^2)`，而贪心优化通过跳过无效起点，将时间复杂度降低到 `O(n)`。

---

#### 2. 贪心策略分析

##### 1. 策略核心

- **核心观察**：若从起点 `i` 出发无法到达位置 `j`，则 `i` 到 `j` 之间的任何位置均不能作为起点。
- **关键操作**：  
  - 遍历可能的起点 `i`，从 `i` 出发模拟行驶。
  - 若在 `step` 步后油量不足，则跳过 `i` 到 `i+step` 之间的所有位置，直接从 `i+step+1` 开始下一轮检查。

##### 2. 策略步骤

1. **初始化**：从 `i=0` 开始检查。
2. **模拟行驶**：
   - 从 `i` 出发，统计累计油量 `rest`。
   - 若 `rest < 0`，记录失败时的步数 `step`。
3. **跳跃优化**：更新 `i` 为 `i+step+1`，跳过无效起点。
4. **终止条件**：当 `i` 超出数组范围或找到可行起点时结束。

---

#### 3. 正确性证明

##### 1. 跳跃优化的正确性

假设从 `i` 出发无法到达 `i+step`，则对任意 `k ∈ [i, i+step]`：
- 从 `k` 出发时，初始油量为 `0`。

- 由于 `i` 到 `k-1` 的累计油量可能为负，从 `k` 到 `i+step` 的油量需补偿此负值，但 `i` 到 `i+step` 的总油量已不足，故 `k` 无法作为起点。

    >- 当从 `i` 出发失败于 `step` 步后（即无法到达 `i+step`），我们可以直接跳过 `i` 到 `i+step` 的所有位置，从 `i+step+1` 开始下一轮检查。
    >- 这样做的原因是：如果从 `i` 出发无法到达 `i+step`，那么从 `i` 到 `i+step` 之间的任何位置出发也无法到达 `i+step`。

**为什么可以跳过 `i` 到 `i+step`？**

假设从 `i` 出发无法到达 `i+step`，即：

-   从 `i` 到 `i+step-1` 的累计油量不足以支持到达 `i+step`。
-   对于任意 `k` 在 `i` 和 `i+step-1` 之间，从 `k` 出发时，初始油量为 `0`。
-   从 `k` 到 `i+step` 的油量需要补偿从 `i` 到 `k-1` 的负油量，但由于从 `i` 到 `i+step` 的总油量已不足，故 `k` 也无法作为起点。

**简单例子**

假设有以下加油站和消耗：

-   `gas = [1, 2, 3, 4, 5]`
-   `cost = [3, 4, 5, 1, 2]`

我们从 `i=0` 开始检查：

-   从 `i=0` 出发，油量 `rest = 1 - 3 = -2`，无法到达 `i=1`。
-   此时 `step=1`，我们跳过 `i=0` 到 `i=1` 的所有位置，直接从 `i=2` 开始下一轮检查。

从 `i=2` 开始检查：

-   从 `i=2` 出发，油量 `rest = 3 - 5 = -2`，无法到达 `i=3`。
-   此时 `step=1`，我们跳过 `i=2` 到 `i=3` 的所有位置，直接从 `i=4` 开始下一轮检查。

从 `i=4` 开始检查：

-   从 `i=4` 出发，油量 `rest = 5 - 2 = 3`，可以到达 `i=0`。
-   继续检查，最终发现从 `i=4` 出发可以绕环一周。

##### 2. 时间复杂度分析

- 每个位置最多被访问两次（作为起点或被跳过），时间复杂度为 `O(n)`。

#### 关键点解释

1. **跳跃优化**：  
   - 若从 `i` 出发失败于 `step` 步后，直接跳过 `i` 到 `i+step` 的位置。
   - 例如，`i=0` 失败于 `step=3`，则下一次检查 `i=4`（假设 `n >4`）。
2. **累计油量计算**：  
   - `rest` 记录从当前起点出发的实时油量，若中途为负则立即终止。
3. **环形遍历**：  
   - 使用 `(i + step) % n` 处理环形索引。

