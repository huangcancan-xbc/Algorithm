### 贪心策略

#### 1. 问题背景

给定一个区间集合，要求移除最少数量的区间，使得剩余区间互不重叠。例如，输入 `[[1,2],[2,3],[3,4],[1,3]]`，移除 `[1,3]` 后剩余区间无重叠，最少移除次数为 `1`。

![image-20250313215637202](https://cdn.jsdelivr.net/gh/huangcancan-xbc/Drawing-bed@master/Algorithm/20250313215637370.png)

---

#### 2. 贪心策略分析

##### 1. 策略核心

- **核心思想**：按区间左端点排序，遍历时若发现重叠，优先保留右端点较小的区间（移除右端点较大的区间）。
- **操作规则**：  
  - 按左端点升序排序，确保处理顺序为从左到右。
  - 维护当前保留区间的右端点 `right`，若下一区间的左端点 `< right`，说明重叠，移除右端点较大的区间。

##### 2. 策略步骤

1. **排序**：将区间按左端点从小到大排序。
2. **初始化**：保留第一个区间，记录其右端点 `right`。
3. **遍历处理**：
   - 若当前区间的左端点 `< right`，说明与保留区间重叠，移除右端点较大的区间（更新 `right` 为 `min(right, 当前右端点)`）。
   - 否则，保留当前区间，更新 `right` 为当前右端点。

---

#### 3. 正确性证明

##### 1. 贪心选择性质

- **保留右端点较小的区间**：
  假设保留区间 `A` 和当前区间 `B` 重叠。若 `A` 的右端点 ≤ `B` 的右端点，保留 `A` 能为后续区间留出更大空间。例如：
  - `A = [1,3]`，`B = [2,4]`，保留 `A` 后，后续区间的左端点只需 `≥3`；保留 `B` 则需 `≥4`。保留 `A` 更优。

##### 2. 最优子结构

- 假设前 `k` 个区间已通过贪心策略得到最优解，处理第 `k+1` 个区间时：
  - 若重叠，选择保留右端点较小的区间，确保后续选择的最优性。
  - 若未重叠，直接保留当前区间，不影响已选结果。

##### 3. 反证法验证

- 假设存在一个更优解，其中某一步未选择保留右端点较小的区间。通过替换为保留右端点较小的区间，可以得到更优或相等的解，矛盾。

---

#### 4. 关键点解释

1. **排序的作用**：  
   - 确保处理顺序为左端点递增，重叠区间在排序后连续，无需回溯。
2. **保留右端点较小的原因**：  
   - 减少对后续区间的影响，最大化剩余可用空间。
3. **时间复杂度**：  
   - 排序 `O(n log n)`，遍历 `O(n)`，总时间复杂度 `O(n log n)`。
