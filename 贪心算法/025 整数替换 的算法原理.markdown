### **二进制贪心思想解析**：

![image-20250314212429331](https://cdn.jsdelivr.net/gh/huangcancan-xbc/Drawing-bed@master/Algorithm/20250314212436495.png)

#### 1. 贪心策略的核心：

-   如果 `n` 是 **偶数**（二进制最后一位是 `0`）：直接除以 2，减少 1 位二进制长度，操作次数 +1。
-   如果 n 是奇数（二进制最后一位是 `1`）：存在两种操作选择：
    -   `n - 1`：使得最低位变成 0，方便后续除以 2。
    -   `n + 1`：有时更优，能连续除以 2，快速缩小数值。

#### 2. 为什么要用二进制贪心？

-   在二进制表示下，`n % 4` 的结果能帮我们判断更优的操作：
    -   若 `n % 4 == 1`：倾向于执行 `n - 1` 操作（如 `5 -> 4 -> 2 -> 1`，更快缩减位数）。
    -   若 `n % 4 == 3`：倾向于执行 `n + 1` 操作（如 `7 -> 8 -> 4 -> 2 -> 1`，能多除一次 2）。
-   唯一例外是 `n == 3` 时，无论 `+1` 还是 `-1` 操作都需要两步，直接返回结果即可。

---

#### 3. 为什么 `n / 2` 操作等价于二进制右移一位？

在二进制表示中，`/2` 等价于右移一位（`>> 1`）：

-   例子：
    -   `8`（`1000₂`）→ `8 / 2 = 4`（`100₂`）
    -   `4`（`100₂`）→ `4 / 2 = 2`（`10₂`）
    -   `2`（`10₂`）→ `2 / 2 = 1`（`1₂`）

因为在 **二进制** 计数系统中，每位的权重是 `2^i`，右移一位意味着去掉最低位，相当于 `n / 2`。

#### 4. 为什么 `n % 4` 影响操作选择？

`n % 4` 取值范围为 `{0, 1, 2, 3}`，但我们只关心奇数情况（`n % 2 == 1`）。

-   若 `n % 4 == 1`，例如 `5`（`101₂`）、`9`（`1001₂`）：
    -   `n - 1` 变成偶数，可以直接 `/2`，减少一步。
    -   示例：`5`（`101₂`） → `4`（`100₂`）→ `2`（`10₂`） → `1`（`1₂`）
-   若 `n % 4 == 3`，例如 `7`（`111₂`）、`11`（`1011₂`）：
    -   `n + 1` 使二进制变成全 `0` 结尾，便于快速 `/2`。
    -   示例：`7`（`111₂`）→ `8`（`1000₂`）→ `4`（`100₂`）→ `2`（`10₂`）→ `1`（`1₂`）

**总结：**

-   `n % 4 == 1` → **优先 `n - 1`**，因为直接 `/2` 更优。
-   `n % 4 == 3` → **优先 `n + 1`**，因为能让二进制低位快速变 0，减少计算步数。
-   `n == 3` 是特例，必须执行 `n - 1`，否则 `n + 1 = 4` 会导致额外操作。

#### 5. 时间复杂度：

-   每次操作都会让 `n` 的二进制位数减少，时间复杂度为 `O(log n)`。
