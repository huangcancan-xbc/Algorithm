### 贪心策略

#### 1. 问题背景

给定一个气球区间集合，每个区间表示气球在水平轴上的位置。一支箭垂直射出时，可以引爆所有与之重叠的气球。求引爆所有气球所需的最少箭数。转化问题，其实是需要我们找出不重叠区间的个数。

![image-20250314155718231](https://cdn.jsdelivr.net/gh/huangcancan-xbc/Drawing-bed@master/Algorithm/20250314160223952.png)

---

#### 2. 贪心策略分析

##### 1. 策略核心

- **核心思想**：按区间左端点排序，遍历时维护当前可引爆区间的最小右端点。若当前区间左端点 ≤ 最小右端点，说明可被同一支箭引爆；否则需要新增一支箭。
- **操作规则**：  
  - 按左端点升序排序，确保处理顺序为从左到右。
  - 维护当前可引爆区间的右端点 `right`，若下一区间的左端点 ≤ `right`，则更新 `right` 为当前区间右端点的较小值；否则新增一支箭，并更新 `right`。

##### 2. 策略步骤

1. **排序**：将区间按左端点从小到大排序。
2. **初始化**：记录第一个区间的右端点 `right`，箭数初始为 `1`。
    -   在贪心策略中，我们从第一个区间开始处理。第一个区间 `[a, b]` 必然需要至少一支箭来引爆它。因此，箭数初始化为 `1`，表示我们已经有一支箭可以覆盖第一个区间。
    -   如果箭数初始化为 `0`，则需要在遍历时额外判断是否已经处理过第一个区间。

3. **遍历处理**：
   - 若当前区间的左端点 ≤ `right`，更新 `right = min(right, 当前右端点)`。
   - 否则，箭数加一，更新 `right` 为当前区间的右端点。

---

#### 3. 正确性证明

##### 1. 贪心选择性质

- **保留右端点较小的区间**：若当前区间的右端点较小，保留它能为后续区间留出更大的空间，增加后续区间被同一支箭引爆的可能性。
- **示例**：区间 `[1,6]` 和 `[2,5]`，保留右端点 `5` 后，后续区间 `[6,15]` 的左端点 `6 > 5`，需新增一支箭。若保留右端点 `6`，则 `[6,15]` 的左端点 `6 ≤ 6`，可被同一支箭引爆。但此时 `[2,5]` 已被处理，必须选择较小右端点。

##### 2. 最优子结构

- 假设前 `k` 个区间已通过贪心策略得到最优解，处理第 `k+1` 个区间时：
  - 若重叠，选择保留较小右端点，确保后续选择的最优性。
  - 若未重叠，直接保留当前区间，不影响已选结果。

##### 3. 反证法验证

- 假设存在更优解，其中某一步未选择保留较小右端点。通过替换为保留较小右端点，可以得到更优或相等的解，矛盾。

---

#### 4. 关键点解释

1. **排序的作用**：确保所有可能重叠的区间在排序后连续，避免复杂判断。
2. **维护最小右端点**：通过 `min(right, b)` 保证当前箭能覆盖后续更多区间。
3. **时间复杂度**：排序 `O(n log n)`，遍历 `O(n)`，总时间复杂度 `O(n log n)`。

#### 5. 示例验证

- **输入**：`[[1,6],[2,8],[10,16],[11,12]]`  
  - 排序后顺序不变，处理过程：
    - `right=6`，箭数 `1`。
    - 第二区间 `[2,8]` 左端点 `2 ≤ 6`，更新 `right=6`。
    - 第三区间 `[10,16]` 左端点 `10 > 6`，箭数 `2`，更新 `right=16`。
    - 第四区间 `[11,12]` 左端点 `11 ≤ 16`，更新 `right=12`。
  - 最终箭数 `2`，正确。

