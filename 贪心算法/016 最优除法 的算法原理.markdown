### 贪心策略

#### 1. 问题背景

给定一个正整数数组（所有数 ≥2），通过添加括号改变除法运算顺序，使表达式结果最大。例如，数组 `[a, b, c, d]` 的最优表达式为 `a/(b/c/d)`，结果为 `a*c*d/b`。

![image-20250312195356288](https://cdn.jsdelivr.net/gh/huangcancan-xbc/Drawing-bed@master/Algorithm/20250312195356379.png)

---

#### 2. 贪心策略分析

##### 1. 策略核心

- **核心观察**：除法运算中，分母越小、分子越大，结果越大。第一个数一定处于分子位置，第二个数一定处于分母位置。
- **关键结论**：
  将第一个数作为分子，第二个数作为分母，后续所有数通过括号全部转换为分子。数学表达式形式：`a/(b/c/d/...)`，等价于 `a*c*d*.../b`。
- **最大化分子**：通过将后面的数尽可能地放在分子上（即作为除法的被除数），可以使得整体结果最大化（即：第一个数统一除以后面所有的数 —— `a/(b/c/d/e/f/……)`）
- **数学证明**：对于三个数a, b, c，有` a / (b / c) = a * c / b > (a / b) / c = a / (b * c)`（因为c >= 2）。因此，将更多的数放在分子上能带来更大的结果。

##### 2. 策略步骤

-   **n=1**：直接返回唯一的数。
-   **n=2**：无法添加括号，直接返回 `a/b`。
-   **n>2**：构造表达式 `a/(b/c/d/...)`，确保后续数都在分子上。

#### 3. 正确性证明

##### 1. 数学推导

假设数组为 `[a, b, c, d, ...]`：
- 表达式 `a/(b/c/d/...)` 的运算顺序为：
  `b/c/d = (b/c)/d = b/(c*d)` → 原式 = `a/(b/(c*d)) = a*c*d/b`。
- 分子为 `a*c*d*...`，分母仅 `b`，最大化结果。

##### 2. 反例验证

若将后续数放在分母，比如 `a/(b/(c/d))` → `a*c/(b*d)`，结果比原策略小。

#### 4. 关键点解释

1. **字符串拼接**：  
   - 第一个数单独处理，第二个数后加括号。
   - 后续数用 `/` 连接，确保运算顺序为 `b/c/d`。
2. **复杂度**：  
   - 时间复杂度：O(n)，只需一次遍历。
   - 空间复杂度：O(n)，用于存储结果字符串。
