### 算法原理

**问题描述**：给定字符串 `s` 和包含正则表达式符号 `.` 和 `*` 的模式 `p`，判断 `s` 是否匹配 `p`。  

- `.` 匹配任意单个字符。  
- `*` 匹配零个或多个前一个元素。

![image-20250303171718719](https://cdn.jsdelivr.net/gh/huangcancan-xbc/Drawing-bed@master/Algorithm/20250303171719034.png)

---

#### 1. 状态表示

定义二维数组 `dp[i][j]`：  
- `dp[i][j]` 表示 `s` 的前 `i` 个字符（`s[0..i-1]`）与 `p` 的前 `j` 个字符（`p[0..j-1]`）是否匹配。  
- 注意：代码中为处理边界，在 `s` 和 `p` 前添加了一个空格，因此实际索引从 1 开始。

#### 2. 状态转移方程

根据 `p[j]` 是否为 `*` 分两种情况：

##### **情况一：`p[j] == '*'`**  
此时需处理 `*` 的两种匹配规则：
1. **匹配零次**（删除 `x*` 结构）：  
   - 直接跳过 `x*`，状态继承自 `dp[i][j-2]`。  
2. **匹配一次或多次**（扩展 `x*` 的匹配范围）：  
   - 要求 `s[i]` 必须与 `x`（即 `p[j-1]`）匹配（`x == '.'` 或 `x == s[i]`）。  
   - 若匹配成功，则当前字符 `s[i]` 被 `x*` 吞并，状态继承自 `dp[i-1][j]`。  

**转移方程**：  
```cpp
dp[i][j] = dp[i][j-2] || ( (p[j-1] == '.' || p[j-1] == s[i]) && dp[i-1][j] );
```

##### **情况二：`p[j] != '*'`**  
此时需严格匹配当前字符：  
- `s[i]` 必须等于 `p[j]` 或 `p[j] == '.'`。  
- 同时，前面的字符需匹配成功，即 `dp[i-1][j-1]` 为 `true`。  

**转移方程**：  
```cpp
dp[i][j] = (p[j] == s[i] || p[j] == '.') && dp[i-1][j-1];
```

#### 3. 初始化

- **空字符串匹配空模式**：`dp[0][0] = true`。  
- **处理模式 `p` 的前缀为 `x*` 的情况**：  
  - 若 `p` 中存在连续的 `x*` 结构（如 `a*b*`），则空字符串 `s` 可以匹配这些模式。  
  - 初始化时，遍历 `p` 的偶数索引位置（`j=2,4,6,...`）：  
    - 若 `p[j] == '*'`，则 `dp[0][j] = dp[0][j-2]`（跳过 `x*`）。  
    - 一旦遇到非 `*` 字符，停止初始化（后续无法匹配空字符串）。

**示例**：  
- `p = "a*b*c*"`：  
  - `dp[0][2] = dp[0][0] = true`（`a*` 匹配空字符串）。  
  - `dp[0][4] = dp[0][2] = true`（`a*b*` 匹配空字符串）。  
  - `dp[0][6] = dp[0][4] = true`（`a*b*c*` 匹配空字符串）。

#### 4. 填表顺序

- **按行填充**：外层循环遍历 `s` 的每个字符（`i` 从 1 到 `m`），内层循环遍历 `p` 的每个字符（`j` 从 1 到 `n`）。  
- **依赖关系**：  
  - `dp[i][j]` 依赖左方 `dp[i][j-2]`（跳过 `x*`）。  
  - 或依赖上方 `dp[i-1][j]`（扩展 `x*` 的匹配）。  
  - 普通字符依赖左上方 `dp[i-1][j-1]`。  

#### 5. 返回值

- **最终结果**：`dp[m][n]`，表示整个字符串 `s` 是否匹配模式 `p`。

---

#### 示例解析

以 `s = "aab"`，`p = "c*a*b"` 为例：  
1. **初始化**：  
   - `dp[0][0] = true`。  
   - `p[2] = '*'` → `dp[0][2] = dp[0][0] = true`（跳过 `c*`）。  
   - `p[4] = '*'` → `dp[0][4] = dp[0][2] = true`（跳过 `a*`）。  
   - `p[5] = 'b'` → 停止初始化。  

2. **填表过程**：  
   - `i=1`（`s[1] = 'a'`）：  
     - `j=1`（`p[1] = 'c'`）：不匹配，`dp[1][1] = false`。  
     - `j=2`（`p[2] = '*'`）：  
       - `dp[1][2] = dp[1][0] || (匹配 ` c ` 并检查 ` dp [0][2]`)。  
       - 由于 `c != 'a'`，仅 `dp[1][2] = dp[1][0] = false`。  
   - 后续逐步填充，最终 `dp[3][5] = true`，匹配成功。

#### 复杂度分析

- **时间复杂度**：O(mn)，遍历整个 `dp` 数组。  
- **空间复杂度**：O(mn)，存储二维状态表。  

#### 关键点总结

- **`*` 的两种处理**：跳过（匹配零次）或扩展（匹配多次）。
- **初始化的重要性**：处理空字符串与 `x*` 模式的匹配。
- **状态依赖的传递**：通过保留 `p` 的位置（`j` 不移动）实现 `*` 的贪婪匹配。
