### 算法原理

**问题描述**：给定一个正整数 `n`，找到若干个完全平方数（如 1, 4, 9, 16, ...）使得它们的和等于 `n`，并返回这些完全平方数的最小数量。

![image-20250305203612564](https://cdn.jsdelivr.net/gh/huangcancan-xbc/Drawing-bed@master/Algorithm/20250305203612714.png)

---

#### 1. 状态定义

- **二维DP**：`dp[i][j]` 表示使用前 `i` 个完全平方数（即 `1², 2², ..., i²`）凑出总和 `j` 所需的最少数量。
- **一维DP**：`dp[j]` 表示凑出总和 `j` 所需的最少完全平方数的数量。

#### 2. 状态转移方程

- **二维DP**：
  
  - 如果不选第 `i` 个完全平方数（`i²`），则 `dp[i][j] = dp[i-1][j]`。
  - 如果选第 `i` 个完全平方数，则 `dp[i][j] = dp[i][j - i²] + 1`（允许重复使用）。
  - 综合两种情况，状态转移方程为：
    $$
    dp[i][j] = \min(dp[i-1][j], dp[i][j - i^2] + 1)
    $$
  
- **一维DP**：
  
  - 通过滚动数组优化空间，状态转移方程为：
    $$
    dp[j] = \min(dp[j], dp[j - i^2] + 1)
    $$

#### 3. 初始化

- **二维DP**：
  - `dp[0][0] = 0`：凑出总和 0 需要 0 个完全平方数。
  - `dp[0][j] = 0x3f3f3f3f`（`j > 0`）：没有完全平方数时无法凑出正数（避免求`min`干扰结果）。
  - `dp[i][0] = 0`（隐含初始化）：总和为 0 时不需要任何数。

- **一维DP**：
  - `dp[0] = 0`：总和为 0 时不需要任何数。
  - `dp[j] = 0x3f3f3f3f`（`j > 0`）：初始状态无法凑出（避免求`min`干扰结果）。

#### 4. 填表顺序

- **二维DP**：
  - 外层遍历完全平方数 `i`（从 1 到 `m`，其中 `m = sqrt(n)`）。
  - 内层遍历总和 `j`（从 0 到 `n`）。

- **一维DP**：
  - 外层遍历完全平方数 `i`。
  - 内层 **顺序** 遍历总和 `j`（从 `i²` 到 `n`），确保同一平方数可重复使用。

#### 5. 关键点

- **完全背包特性**：每个完全平方数可以无限次使用，因此内层需从小到大遍历。
- **数学性质**：任何数 `n` 的完全平方数分解最多包含 `sqrt(n)` 个平方数，因此 `m = floor(sqrt(n))`。

---

#### 示例分析

以 `n = 12` 为例：
1. **初始化**：
   - 二维：`dp[0][0] = 0`，其他 `dp[0][j] = ∞`。
   - 一维：`dp[0] = 0`，其他 `dp[j] = ∞`。

2. **处理完全平方数 1（i=1）**：
   - 更新所有 `j >= 1`，`dp[j] = j`（因为 `1² = 1`，每个 `j` 需要 `j` 个 1）。
   - 二维和一维的 `dp` 结果相同：
     ```cpp
     dp = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
     ```

3. **处理完全平方数 4（i=2）**：
   - 更新 `j >= 4`：
     - `j = 4`：`dp[4] = min(4, dp[0] + 1) = 1`。
     - `j = 5`：`dp[5] = min(5, dp[1] + 1) = 2`。
     - ...
   - 更新后一维 `dp`：
     ```cpp
     dp = [0, 1, 2, 3, 1, 2, 3, 4, 2, 3, 4, 5, 3]
     ```

4. **处理完全平方数 9（i=3）**：
   - 更新 `j >= 9`：
     - `j = 9`：`dp[9] = min(3, dp[0] + 1) = 1`。
     - `j = 12`：`dp[12] = min(3, dp[3] + 1) = 3`（即 9 + 1 + 1 + 1，或 4 + 4 + 4）。
   - 最终一维 `dp`：
     ```cpp
     dp = [0, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 3]
     ```

