### 算法原理

#### 问题转化

在一些物品中「挑选」一些出来，然后在满足某个「限定条件」下，解决一些问题，大概率是背包模型。

由于每一个物品都只有1个，因此是一个「01背包问题」。但是，我们发现这一道题里面有「两个限制条件」。

因此是一个「二维费用的01背包问题」。那么我们在定义状态表示的时候，来一个三维dp表，把第二个限制条件加上即可。

![image-20250305220717882](https://cdn.jsdelivr.net/gh/huangcancan-xbc/Drawing-bed@master/Algorithm/20250305220718013.png)

---

#### 1. 状态表示

`dp[i][j][k]` 表示：从前 `i` 个字符串中挑选，字符 `0` 的个数不超过 `j` ，字符 `1` 的个数不超过 `k` ，所有的选法中，最大的长度。

#### 2. 状态转移方程

线性dp状态转移方程分析方式，一般都是「根据最后一步」的状况，来分情况讨论。为了方便叙述，我们记第 `i` 个字符中，字符 `0` 的个数为 `a`，字符 `1` 的个数为 `b`：
- **不选第 `i` 个字符串**：相当于就是去前 `i - 1` 个字符串中挑选，并且字符 `0` 的个数不超过 `j`，字符 `1` 的个数不超过 `k`。此时的最大长度为 `dp[i][j][k] = dp[i - 1][j][k]`；
- **选择第 `i` 个字符串**：那么接下来我仅需在前 `i - 1` 个字符串里边，挑选出来字符 `0` 的个数不超过 `j - a`，字符 `1` 的个数不超过 `k - b` 的最长长度，然后在这个长度后面加上字符串 `i` 即可。此时 `dp[i][j][k] = dp[i - 1][j - a][k - b] + 1`。但是这种状态不一定存在，因此需要特判一下。

**综上，状态转移方程为：`dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j - a][k - b] + 1)`。**

#### 3. 初始化
当没有字符串的时候，没有长度，因此初始化为 `0` 即可。

#### 4. 填表顺序
保证第一维的循环「从小到大」即可。

#### 5. 返回值
根据「状态表示」，我们返回 `dp[len][m][n]`。其中 `len` 表示字符串数组的长度。

#### 6. 空间优化
所有的「背包问题」，都可以进行空间上的优化。
对于「二维费用的01背包」类型的，我们的优化策略是：
- 删掉第一维；
- 修改第二层以及第三层循环的遍历顺序（从大到小）即可，以确保每个物品只被选择一次。

---

#### 问题 1：为什么 `i` 要从 1 开始，而不从 0 开始？

在动态规划（DP）中，我们通常会使用 **`dp[i]` 表示前 `i` 个元素的状态**，因此 `i=0` 一般用于表示 **空集合的初始状态**。在本题中：

-   `dp[i][j][k]` 表示 **在前 `i` 个字符串** 里，使用最多 `j` 个 `'0'` 和 `k` 个 `'1'` 时的最大子集大小。
-   `i=0` 代表 **没有选取任何字符串**，所以 `dp[0][j][k] = 0`，即在不选任何字符串的情况下，最大子集大小只能是 0。

所以，**从 `i=1` 开始遍历**，表示从第 1 个字符串开始计算状态转移，确保 `dp[i][j][k]` 依赖于 `dp[i-1][j][k]`。

#### 问题 2：`strs[i - 1]` 及其循环是什么意思？

##### 1. `strs[i - 1]` 的作用

在代码中：

```cpp
for (auto x : strs[i - 1])
```

-   `strs` 是字符串数组，索引从 `0` 开始。
-   `i` 是从 `1` 开始遍历的，所以 **当前字符串 `strs[i-1]` 对应的是第 `i` 个字符串**。
-   这样写可以让 `dp[i]` 直接表示前 `i` 个字符串的状态，而 **不需要特殊处理 `dp[0]` 的情况**。

##### 2. `for (auto x : strs[i - 1])` 这个循环的作用

**统计当前字符串 `strs[i-1]` 中 `'0'` 和 `'1'` 的个数**：

-   `a` 记录 `'0'` 的个数。
-   `b` 记录 `'1'` 的个数。
-   统计完成后，`a` 和 `b` 就能用来判断当前字符串是否可以被选取。

---

1.  **`i` 从 `1` 开始**，因为 `dp[i]` 代表 **前 `i` 个字符串的状态**，避免了 `dp[0]` 的特判。
2.  **`strs[i - 1]`** 代表的是 **第 `i` 个字符串**，因为 `strs` 数组的索引是从 `0` 开始的，而 `i` 从 `1` 开始。
3.  **循环 `for (auto x : strs[i - 1])` 作用**：统计当前字符串 `'0'` 和 `'1'` 的个数，供 DP 计算使用。