### 动态规划（DP）知识总结

系统化的 DP 知识框架和核心要点：

---

#### 一、动态规划基础

1. **核心思想**  
   - **重叠子问题**：重复计算相同子问题时，通过记忆化（如数组/哈希表）避免重复计算。  
   - **最优子结构**：全局最优解可通过子问题的最优解推导。  

2. **解题步骤**  
   1.  定义状态（`dp[i]` 的含义）。  
   2.  确定状态转移方程（递推关系）。  
   3.  初始化边界条件。
   4.  填表顺序
   5.  返回值
   6.  优化空间复杂度（如滚动数组）。  

#### 二、专题分类与核心模型

1. **斐波那契数列模型**  
   - **问题类型**：简单递推（如爬楼梯、打家劫舍）。  
   - **状态转移**：`dp[i] = dp[i-1] + dp[i-2]`。  
   - **优化**：用变量代替数组，空间复杂度降至 `O(1)`。  

2. **路径问题**  
   - **典型问题**：网格路径计数（含障碍物）、最小路径和。  
   - **状态定义**：`dp[i][j]` 表示从起点到 `(i,j)` 的路径数/最小代价。  
   - **转移方程**：`dp[i][j] = dp[i-1][j] + dp[i][j-1]`（路径计数）。  

3. **简单多状态 DP**  
   - **特点**：同一位置有多个状态（如股票买卖问题）。  
   - **状态设计**：  
     - 例：`dp[i][0]` 表示第 `i` 天持有股票的最大利润，`dp[i][1]` 表示不持有。  
   - **转移方程**：需分状态讨论。  

4. **子数组与子序列问题**  
   - **子数组**（连续）：  
     - 典型问题：最大子数组和（Kadane 算法）。  
     - 状态定义：`dp[i]` 表示以 `nums[i]` 结尾的最大子数组和。  
   - **子序列**（非连续）：  
     - 典型问题：最长递增子序列（LIS）、最长公共子序列（LCS）。  
     - 转移方程：`LIS` 中 `dp[i] = max(dp[j]+1)`，其中 `j < i` 且 `nums[j] < nums[i]`。  

5. **回文串问题**  
   - **常见问题**：最长回文子串、回文子串计数、分割回文串。  
   - **状态定义**：`dp[i][j]` 表示子串 `s[i..j]` 是否为回文。  
   - **转移方程**：`dp[i][j] = (s[i]==s[j]) && dp[i+1][j-1]`。  

6. **两个数组的 DP 问题**  
   - **典型问题**：编辑距离、最长公共子序列。  
   - **状态设计**：`dp[i][j]` 表示处理到 `s1[0..i]` 和 `s2[0..j]` 的状态。  
   - **转移方程**：分情况讨论（增、删、改）。  

7. **背包问题**  
   - **0-1 背包**：  
     - 特点：每个物品选或不选。  
     - 状态转移：`dp[j] = max(dp[j], dp[j-w[i]] + v[i])`（逆序枚举容量）。  
   - **完全背包**：  
     - 特点：物品无限次选择。  
     - 状态转移：`dp[j] = max(dp[j], dp[j-w[i]] + v[i])`（正序枚举容量）。  
   - **二维费用背包**：  
     - 扩展：容量限制+额外约束（如重量+体积）。  

8. **卡特兰数**  
   - **应用场景**：括号生成、凸多边形三角划分、出栈序列计数。  
   - **递推公式**：
   
   $$
   C_n = \sum_{i = 0}^{n-1} C_i \cdot C_{n-1-i}
   $$
   
   - **直接公式**：`C(n) = C(2n,n)/(n+1)`。

---

#### 三、通用优化技巧

1. **空间压缩**：将二维 DP 压缩为一维（如背包问题）。  
    -   删除第一维
    -   修改其他层的遍历顺序（**01 背包优化：从后向前；完全背包优化：从前向后**）
2. **状态合并**：当某些状态可被数学表达替代时（如斐波那契数列）。  
3. **剪枝与贪心结合**：某些问题中，贪心策略可简化 DP（如跳跃游戏）。  

---

[代码随想录相关文章](https://www.programmercarl.com/动态规划总结篇.html#动态规划基础)
