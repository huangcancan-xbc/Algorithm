### 算法原理

**问题描述**  
给定字符串 `s`，统计其中不同非空子串的数量，这些子串必须是无限环绕字符串 `"...zabcdefghijklmnopqrstuvwxyzabcdef..."` 的连续子串。

**核心思想**  
利用动态规划（DP）跟踪以每个字符结尾的最长连续子串长度，结合哈希数组记录每个字符的最大连续长度，避免重复计数，从而高效计算结果。

---

### 关键步骤解析

#### 1. 状态定义

- **`dp[i]`**：表示以字符 `s[i]` 结尾的最长连续有效子串的长度。  
  - **示例**：`s = "zab"` 时，`dp[2] = 3`（对应子串 `"zab"`）。  
  - **作用**：通过记录最长连续长度，间接统计所有可能的子串。

#### 2. 状态转移
- **条件**：当前字符 `s[i]` 与前一个字符 `s[i-1]` 连续（如 `'a'` 后接 `'b'`，或 `'z'` 后接 `'a'`）。  
  
  - **转移方程**：  
    $$
    dp[i] = \begin{cases} 
    dp[i-1] + 1 & \text{若连续} \\
    1 & \text{否则}
    \end{cases}
    $$
  - **解释**：若连续，则当前字符可扩展前一个字符的所有子串，形成新子串；否则以当前字符重新开始计数。

#### 3. 哈希数组优化
- **`hash[26]`**：记录每个字符（`'a'` 到 `'z'`）作为结尾时的最大连续长度。  
  - **更新规则**：遍历 `dp` 数组，对每个字符取最大连续长度。例如，若 `s[i] = 'c'` 且 `dp[i] = 5`，则 `hash['c'] = max(5, 当前值)`。  
  - **数学性质**：字符 `c` 的最大连续长度为 `k`，则它贡献 `k` 个不同子串（长度为 `1` 到 `k` 的子串均被包含）。

#### 4. 结果计算
- 累加 `hash` 数组中所有值，得到唯一子串总数。  
  - **正确性**：每个字符的最大长度覆盖了所有可能的以该字符结尾的子串，避免重复计数。

---

### 正确性证明

1. **覆盖所有子串**  
   - 最长连续子串长度为 `k` 时，必然包含长度为 `1, 2, ..., k` 的子串。例如，最长子串 `"abcd"` 包含 `"d"`, `"cd"`, `"bcd"`, `"abcd"`。  
2. **避免重复计数**  
   - 哈希数组记录每个字符的最大长度，确保同一字符的不同位置贡献不重复。例如，若字符 `c` 在位置 `i` 的最大长度为 `5`，则位置 `j` 的 `3` 已被包含。

---

### 复杂度分析

- **时间复杂度**：  
  - **O(n)**：两次线性遍历（填充 `dp` 和更新 `hash`）。  
- **空间复杂度**：  
  - **O(1)**：固定大小的 `hash[26]`（可优化 `dp` 为单个变量，空间复杂度仍为 O(1)）。

---

### 示例演算

#### 示例 1：`s = "zab"`
1. **动态规划过程**：  
   - `dp = [1, 2, 3]`（对应子串 `"z"`, `"za"`, `"zab"`）。  
2. **哈希数组更新**：  
   - `hash['z'] = 1`, `hash['a'] = 2`, `hash['b'] = 3`。  
3. **结果计算**：  
   - `1 + 2 + 3 = 6`，对应子串 `"z", "a", "b", "za", "ab", "zab"`。

#### 示例 2：`s = "abczabc"`
1. **动态规划过程**：  
   - `dp = [1, 2, 3, 1, 2, 3, 4]`。  
2. **哈希数组更新**：  
   - `hash['a'] = 2`, `hash['b'] = 3`, `hash['c'] = 4`, `hash['z'] = 1`。  
3. **结果计算**：  
   - `2 + 3 + 4 + 1 = 10`，对应所有以 `a`, `b`, `c`, `z` 结尾的有效子串。

---

### 边界情况处理

1. **单个字符**：  
   - `s = "a"`，结果为 `1`。  
2. **全连续字符串**：  
   - `s = "abcd"`，结果为 `1 + 2 + 3 + 4 = 10`。  
3. **环绕边界**：  
   - `s = "zaz"`，`dp` 为 `[1, 2, 1]`，结果为 `1 + 2 = 3`（子串 `"z", "a", "za"`）。
