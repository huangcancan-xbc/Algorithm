### 记忆化搜索（Memoization）详细解释

记忆化搜索是一种递归优化技术，常用于动态规划中。它通过缓存（备忘录）已经计算过的结果，避免了在递归中对相同问题的重复计算，显著提升了算法的效率。（说白了也就是用空间换时间的一种策略）

#### 核心思想

记忆化搜索的核心思想是在递归的过程中，对于已经解决的子问题，将结果存储在一个“备忘录”中。每当遇到相同的子问题时，直接从备忘录中取出结果，避免了重复计算，从而大大减少了计算的时间复杂度。

#### 记忆化搜索的步骤

1. **递归函数设计**：首先需要设计递归函数，来求解问题的子问题。每个递归调用通常会针对当前的子问题返回一个结果。
2. **备忘录机制**：在递归函数中，引入一个存储中间结果的机制。常见的方法是使用一个数组或哈希表存储每个子问题的计算结果。每当一个子问题的结果计算完成后，它会被存储在备忘录中。
3. **查询备忘录**：在每次递归调用时，首先检查当前子问题的结果是否已经在备忘录中。如果存在，直接返回结果；如果不存在，计算该子问题并将其结果存入备忘录。

#### 记忆化搜索的时间复杂度

记忆化搜索的时间复杂度通常是 O(n)，其中 n 是子问题的数量。因为每个子问题最多计算一次，然后存储在备忘录中，以后就不再计算。

### 问题解答：

#### 1. 所有递归都能通过记忆化搜索优化吗？

不是所有的递归都适合使用记忆化搜索。记忆化搜索最有效的应用场景是在问题中存在重叠子问题的情况下。如果递归问题中的子问题不会重复计算，那么记忆化搜索并不会带来明显的性能提升。例如，深度优先搜索（DFS）通常用于图的遍历，若图中没有重叠子问题，记忆化搜索并不会显著提高效率。

#### 2. 带“备忘录”的递归 VS 带“备忘录”的动态规划 VS 记忆化搜索

- **带备忘录的递归**：这实际上就是记忆化搜索。通过递归和备忘录存储结果来避免重复计算。
- **带备忘录的动态规划**：自顶向下的动态规划也使用了递归和备忘录。两者的区别在于，动态规划更多强调的是通过逐步构建解决方案来避免冗余，而记忆化搜索侧重于通过递归的方式优化。
- **记忆化搜索**：通常是动态规划的一种实现方式，通过递归结合备忘录来减少重复计算。

#### 3. 自顶向下 VS 自底向上

- **自顶向下**：通常是递归的方式，从大问题开始递归地分解成小问题，并通过备忘录优化。记忆化搜索通常是自顶向下的方法。
- **自底向上**：不使用递归，而是从最小的子问题开始，逐步构建解决方案，通常使用迭代方法。

两者的主要区别在于自顶向下是递归实现，使用备忘录；而自底向上是通过迭代来逐步求解问题。

#### 4. 解决问题的顺序：暴搜到记忆化搜索再到动态规划？

并不是所有问题都可以通过暴力搜索（暴搜）转换为记忆化搜索，再到动态规划。对于某些问题，暴力搜索的优化可能很有限，甚至无法通过记忆化搜索或者动态规划有效解决。此时可能需要使用其他算法，比如贪心算法、分治法等。

### 总结

记忆化搜索通过使用备忘录缓存已经计算的结果，显著减少了重复计算，从而优化了递归算法。它是自顶向下动态规划的一种实现方式，能够显著提高效率，特别是在处理有重叠子问题的递归问题时。然而，并不是所有递归都适合记忆化搜索，只有在存在重叠子问题时，记忆化搜索才是有效的优化手段。