## 1. 如何理解代码的三个返回？

在数独求解代码中，存在三个主要的 `return` 语句，每个 `return` 在不同的逻辑位置发挥关键作用。理解这三个 `return` 的功能对于掌握深度优先搜索（DFS）与回溯法在数独求解中的应用至关重要。以下是对这三个 `return` 语句的详细解释：

### 1. `return true;` —— 在成功完成数独填充时返回

**位置：**

```cpp
if (dfs(board)) 
{ 
    return true; // 递归尝试填充下一个空格，如果成功完成填充，直接返回 true 
}
```

**解释：**

- **上下文：** 这个 `return true;` 位于递归调用 `dfs(board)` 之后。当尝试在当前空格填入一个合法数字后，函数会递归地尝试填充下一个空格。
- **功能：** 如果递归调用 `dfs(board)` 返回 `true`，意味着从当前填入的数字开始，后续的所有空格都成功被填充，数独已被成功解决。
- **作用：** 立即返回 `true`，向上一层递归传递成功的信号，终止进一步的搜索和回溯操作。这保证了一旦找到一个有效的解，算法会尽快停止，不会继续探索其他不必要的可能性。

**示例流程：**

1. 假设当前空格填入数字 `5` 后，递归调用 `dfs(board)` 成功解决了整个数独。
2. `dfs(board)` 返回 `true`。
3. 当前调用的 `dfs` 函数立即返回 `true`，通知上层递归调用已经找到了解。

### 2. `return false;` —— 当当前填数字导致冲突时返回

**位置：**

```cpp
return false; // 如果 1~9 都无法填充，则返回 false 
```

**解释：**

- **上下文：** 这个 `return false;` 位于双重循环内部，当尝试在当前空格填入数字 `1` 到 `9` 后，发现没有任何一个数字能够合法地填入该位置时。
- **功能：** 表示当前路径无法导致数独的成功解决，需要进行回溯。
- **作用：** 返回 `false`，通知上一层递归调用当前填入的数字不合适，必须撤销（回溯）并尝试其他可能的数字。

**示例流程：**

1. 当前空格尝试填入数字 `1`，导致后续无法完成数独。
2. 尝试数字 `2`，同样失败。
3. ……直到数字 `9`，仍然无法找到合法的填法。
4. 由于所有数字都无法填入当前空格，函数返回 `false`，触发回溯机制。

### 3. `return true;` —— 当所有空格都成功填充时返回

**位置：**

```cpp
return true; // 全部填充成功 
```

**解释：**

- **上下文：** 这个 `return true;` 位于 `dfs` 函数的末尾。当遍历完整个数独板，没有发现任何空格（即所有空格都已成功填充），函数执行到这里。
- **功能：** 表示数独已经被成功解决，没有剩余的空格需要填充。
- **作用：** 返回 `true`，通知递归调用的上一层，整个数独已经解决，整个递归过程可以终止。

**示例流程：**

1. 递归调用逐步填充所有空格。
2. 最后一个空格被成功填入数字后，递归调用再次检查数独板。
3. 遍历整个数独板，没有发现空格，执行 `return true;`。
4. 这个 `true` 信号会逐层传递回最初的调用，最终结束算法。

### 综合流程示意

> **算法原理：**
>
> 为了存储每个位置的元素，我们需要定义⼀个二维数组。⾸先，我们记录所有已知的数据，然后遍历所有需要处理的位置，并遍历数字 1~9。对于每个位置，我们检查该数字是否可以存放在该位置，同时检查⾏、列和九宫格是否唯⼀。我们可以使⽤⼀个⼆维数组来记录每个数字在每一行中是否出现，⼀个二维数组来记录每个数字在每⼀列中是否出现。对于九宫格，我们可以以⾏和列除以 3 得到的商作为九宫格的坐标，并使⽤⼀个三维数组来记录每个数字在每⼀个九宫格中是否出现。在检查是否存在冲突时，只需检查⾏、列和九宫格⾥对应的数字是否已被标记。如果数字⾄少有⼀个位置（⾏、列、九宫格）被标记，则存在冲突，因此不能在该位置放置当前数字。
>
> **特别地：** 在本题中，我们需要直接修改给出的数组，因此在找到⼀种可⾏的⽅法时，应该停⽌递归，以防⽌正确的⽅法被覆盖。
>
> **初始化定义：**
>
> 1. 定义⾏、列、九宫格标记数组以及找到可⾏⽅法的标记变量，将它们初始化为 false。
> 2. 定义⼀个数组来存储每个需要处理的位置。
> 3. 将题⽬给出的所有元素的⾏、列以及九宫格坐标标记为 true。
> 4. 将所有需要处理的位置存⼊数组。
>
> **递归流程如下：**
>
> 1. 结束条件：已经处理完所有需要处理的元素。如果找到了可⾏的解决⽅案，则将标记变量更新为 true 并返回。
> 2. 获取当前需要处理的元素的⾏列值。
> 3. 遍历数字 1~9。如果当前数字可以填⼊当前位置，并且标记变量未被赋值为 true，则将当前位置的⾏、列以及九宫格⺫标记为 true，将当前数字赋值给 board 数组中的相应位置元素，然后对下⼀个位置进⾏递归。
> 4. 递归结束时，撤回标记。

### 关键点总结

- **`return true;`（递归成功）：** 表示从当前填入的数字开始，整个数独已经被成功解决，算法可以终止。
- **`return false;`（递归失败）：** 表示当前路径无法导致数独的成功解决，需要撤销当前填入的数字并尝试其他可能性。
- **`return true;`（全部填充成功）：** 表示整个数独板已经没有空格，所有空格都被成功填充，数独被解决。

通过这三个 `return` 语句，算法能够有效地探索数独的所有可能解，同时通过回溯机制避免无效的搜索路径，从而高效地找到数独的解。